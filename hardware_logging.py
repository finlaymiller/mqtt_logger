# Finlay Miller 2019
# Raspberry Pi hardware data logging script
# Communication Networks Term Project
#
# Uses psutil to gather all hardware data relevant to monitoring my Raspberry Pi Zero W
# To be used with the rest of my MQTT logging scripts.
import psutil as psu


def get_cpu():
	"""
	Get CPU data using psutil

	:return: A dict of two dicts, each with the values shown in their respective XXX_attrib list
	"""
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	time_attribs = ['user', 'system', 'idle']
	perc_attribs = 'percent'

	time = psu.cpu_times()[:3]
	perc = psu.cpu_percent(interval=1)

	cpu_data = {'time': dict(zip(time_attribs, time)),
				'perc': {perc_attribs: perc}}

	return cpu_data


def get_mem():
	"""
	Get memory data using psutil

	:return: A dict of two dicts, each with the values shown in their respective XXX_attrib list
	"""
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	swap_attribs = ['total', 'used', 'free', 'percent']
	virt_attribs = ['total', 'avail', 'used', 'free', 'active', 'inactive',
					'buffers', 'cached', 'shared', 'slab', 'wired']

	swap = psu.swap_memory()[:4]
	virt = psu.virtual_memory()

	mem_data = {'swap': dict(zip(swap_attribs, swap)),
				'virt': dict(zip(virt_attribs, virt))}

	return mem_data


def get_dsk():
	"""
	Get disk data using psutil

	:return: A dict of two dicts, each with the values shown in their respective XXX_attrib list
	"""

	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	usage_attribs = ['total', 'used', 'free', 'percent']
	dskio_attribs = ['read_count', 'write_count', 'read_bytes', 'write_bytes']

	usage = psu.disk_usage('/')
	dskio = psu.disk_io_counters(nowrap=True)

	disk_data = {'usage': dict(zip(usage_attribs, usage)),
				 'dskio': dict(zip(dskio_attribs, dskio))}

	return disk_data


def get_nwk():
	"""
	Get network data using psutil

	:return: A dict of two dicts, each with the values shown in their respective XXX_attrib list
	"""
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	cntr_attribs = ['bytes_sent', 'bytes_recv', 'packets_sent',
					'packets_recv', 'errin', 'errout', 'dropin', 'dropout']
	sckt_attribs = ['fd', 'family', 'type', 'laddr', 'raddr', 'status', 'pid']

	cntrs = psu.net_io_counters(nowrap=True)
	sckts = psu.net_connections()

	nwk_data = {'counters': dict(zip(cntr_attribs, cntrs)),
				'sockets': dict(zip(sckt_attribs, sckts))}

	return nwk_data


def get_tmp():
	"""
	Get temperature data using psutil

	:return: One dict
	"""
	temp_attribs = 'temperature'

	temp = psu.sensors_temperatures()
	dict_temp = {temp_attribs: temp}

	return dict_temp


def get_hw_data():
	"""
	Get hardware data. Uses the above functions to collect a bunch of information on the Raspberry Pi's hardware. Zips
	them together to form a three layer deep nested dict.

	:return: Nested dicts
	"""
	hw_attribs = ['cpu', 'memory', 'disk', 'network', 'temperature']

	cpu_data = get_cpu()
	mem_data = get_mem()
	disk_data = get_dsk()
	nwk_data = get_nwk()
	temperature_data = get_tmp()

	data = [cpu_data, mem_data, disk_data, nwk_data, temperature_data]
	hw_data = dict(zip(hw_attribs, data))

	return hw_data
